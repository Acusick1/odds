"""initial schema

Revision ID: 1b46df42e39c
Revises:
Create Date: 2025-10-16 12:53:13.601824

"""
import sqlalchemy as sa
import sqlmodel
from alembic import op

# revision identifiers, used by Alembic.
revision = "1b46df42e39c"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "events",
        sa.Column("id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("sport_key", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("sport_title", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("commence_time", sa.DateTime(), nullable=False),
        sa.Column("home_team", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("away_team", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column(
            "status",
            sa.Enum("SCHEDULED", "LIVE", "FINAL", "CANCELLED", "POSTPONED", name="eventstatus"),
            nullable=False,
        ),
        sa.Column("home_score", sa.Integer(), nullable=True),
        sa.Column("away_score", sa.Integer(), nullable=True),
        sa.Column("completed_at", sa.DateTime(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_events_away_team"), "events", ["away_team"], unique=False)
    op.create_index(op.f("ix_events_commence_time"), "events", ["commence_time"], unique=False)
    op.create_index(op.f("ix_events_home_team"), "events", ["home_team"], unique=False)
    op.create_index(op.f("ix_events_sport_key"), "events", ["sport_key"], unique=False)
    op.create_table(
        "fetch_logs",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("fetch_time", sa.DateTime(), nullable=False),
        sa.Column("sport_key", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("events_count", sa.Integer(), nullable=False),
        sa.Column("bookmakers_count", sa.Integer(), nullable=False),
        sa.Column("success", sa.Boolean(), nullable=False),
        sa.Column("error_message", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("api_quota_remaining", sa.Integer(), nullable=True),
        sa.Column("response_time_ms", sa.Integer(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_fetch_logs_fetch_time"), "fetch_logs", ["fetch_time"], unique=False)
    op.create_table(
        "data_quality_logs",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("event_id", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("severity", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("issue_type", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("raw_data", sa.JSON(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["event_id"],
            ["events.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_data_quality_logs_created_at"), "data_quality_logs", ["created_at"], unique=False
    )
    op.create_table(
        "odds",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("event_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("bookmaker_key", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("bookmaker_title", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("market_key", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("outcome_name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("price", sa.Integer(), nullable=False),
        sa.Column("point", sa.Float(), nullable=True),
        sa.Column("odds_timestamp", sa.DateTime(), nullable=False),
        sa.Column("last_update", sa.DateTime(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("is_valid", sa.Boolean(), nullable=False),
        sa.Column("validation_notes", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.ForeignKeyConstraint(
            ["event_id"],
            ["events.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index("ix_bookmaker_time", "odds", ["bookmaker_key", "odds_timestamp"], unique=False)
    op.create_index(
        "ix_event_bookmaker_market",
        "odds",
        ["event_id", "bookmaker_key", "market_key"],
        unique=False,
    )
    op.create_index(op.f("ix_odds_bookmaker_key"), "odds", ["bookmaker_key"], unique=False)
    op.create_index(op.f("ix_odds_event_id"), "odds", ["event_id"], unique=False)
    op.create_index(op.f("ix_odds_market_key"), "odds", ["market_key"], unique=False)
    op.create_index(op.f("ix_odds_odds_timestamp"), "odds", ["odds_timestamp"], unique=False)
    op.create_table(
        "odds_snapshots",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("event_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("snapshot_time", sa.DateTime(), nullable=False),
        sa.Column("raw_data", sa.JSON(), nullable=True),
        sa.Column("bookmaker_count", sa.Integer(), nullable=False),
        sa.Column("api_request_id", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["event_id"],
            ["events.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "ix_event_snapshot_time", "odds_snapshots", ["event_id", "snapshot_time"], unique=False
    )
    op.create_index(
        op.f("ix_odds_snapshots_event_id"), "odds_snapshots", ["event_id"], unique=False
    )
    op.create_index(
        op.f("ix_odds_snapshots_snapshot_time"), "odds_snapshots", ["snapshot_time"], unique=False
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_odds_snapshots_snapshot_time"), table_name="odds_snapshots")
    op.drop_index(op.f("ix_odds_snapshots_event_id"), table_name="odds_snapshots")
    op.drop_index("ix_event_snapshot_time", table_name="odds_snapshots")
    op.drop_table("odds_snapshots")
    op.drop_index(op.f("ix_odds_odds_timestamp"), table_name="odds")
    op.drop_index(op.f("ix_odds_market_key"), table_name="odds")
    op.drop_index(op.f("ix_odds_event_id"), table_name="odds")
    op.drop_index(op.f("ix_odds_bookmaker_key"), table_name="odds")
    op.drop_index("ix_event_bookmaker_market", table_name="odds")
    op.drop_index("ix_bookmaker_time", table_name="odds")
    op.drop_table("odds")
    op.drop_index(op.f("ix_data_quality_logs_created_at"), table_name="data_quality_logs")
    op.drop_table("data_quality_logs")
    op.drop_index(op.f("ix_fetch_logs_fetch_time"), table_name="fetch_logs")
    op.drop_table("fetch_logs")
    op.drop_index(op.f("ix_events_sport_key"), table_name="events")
    op.drop_index(op.f("ix_events_home_team"), table_name="events")
    op.drop_index(op.f("ix_events_commence_time"), table_name="events")
    op.drop_index(op.f("ix_events_away_team"), table_name="events")
    op.drop_table("events")
    # ### end Alembic commands ###
